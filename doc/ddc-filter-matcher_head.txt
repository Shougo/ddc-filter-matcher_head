*ddc-filter-matcher_head.txt*	Heading matcher for ddc.vim

Author: Shougo <Shougo.Matsu at gmail.com>
License: MIT license

CONTENTS				*ddc-filter-matcher_head-contents*

Introduction		|ddc-filter-matcher_head-introduction|
Install			|ddc-filter-matcher_head-install|
Examples		|ddc-filter-matcher_head-examples|
Params			|ddc-filter-matcher_head-params|


==============================================================================
INTRODUCTION				*ddc-filter-matcher_head-introduction*

This filter filters items by word head.


==============================================================================
INSTALL					*ddc-filter-matcher_head-install*

Please install both "ddc.vim" and "denops.vim".

https://github.com/Shougo/ddc.vim
https://github.com/vim-denops/denops.vim


==============================================================================
EXAMPLES				*ddc-filter-matcher_head-examples*
>
	call ddc#custom#patch_global('sourceOptions', #{
	      \  _: #{
	      \    matchers: ['matcher_head'],
	      \  }
	      \})
<
You can define filters with |ddc#custom#alias()| as your preference like
below:
>
	call ddc#custom#alias('filter', 'matcher_initial', 'matcher_head')
	call ddc#custom#alias('filter', 'matcher_first_2', 'matcher_head')
	call ddc#custom#alias('filter', 'matcher_first_3', 'matcher_head')
	call ddc#custom#alias('filter', 'matcher_lazy_1', 'matcher_head')
	call ddc#custom#alias('filter', 'matcher_lazy_2', 'matcher_head')
	call ddc#custom#patch_global('filterParams', #{
	      \   matcher_initial: #{
	      \     maxMatchLength: 1,
	      \   },
	      \   matcher_first_2: #{
	      \     maxMatchLength: 2,
	      \   },
	      \   matcher_first_3: #{
	      \     maxMatchLength: 3,
	      \   },
	      \   matcher_lazy_1: #{
	      \     maxMatchLength: -1,
	      \   },
	      \   matcher_lazy_2: #{
	      \     maxMatchLength: -2,
	      \   },
	      \ })
	call ddc#custom#patch_global('sourceOptions', #{
	      \   _: #{
	      \     matchers: ['matcher_initial', 'matcher_fuzzy'],
	      \   }
	      \ })

Note: This sample supposes that you have installed tani/ddc-fuzzy.
https://github.com/tani/ddc-fuzzy


==============================================================================
PARAMS					*ddc-filter-matcher_head-params*

				*ddc-filter-matcher_head-param-maxMatchLength*
maxMatchLength	(number)
		Set `0` to reduce items which don't match with entire user
		input.
		Set a positive number to reduce items which don't match with
		user input in the length.
		Set a negative number to apply filter in the length shorter
		than current input by the absolute number.
		Note: There is no guarantee that this option will work
		properly when user input string contains some particular
		characters. It depends on the implementation of
		`String.prototype.slice()`.

		Default: `0`

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
